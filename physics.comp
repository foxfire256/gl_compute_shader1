#version 450 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

uniform float delta_t;
uniform uint point_count;

float G = 6.67408e-11;

layout(std140, binding=0) buffer x
{
	vec3 pos[];
};

layout(std140, binding=1) buffer v
{
	vec3 vel[];
};

layout(std140, binding=2) buffer m
{
	float mass[];
};

layout(std140, binding=3) buffer x2
{
	vec3 pos1[];
};

layout(std140, binding=4) buffer v2
{
	vec3 vel1[];
};

// local_size_x needs to be the size of the work group
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
uint gid = gl_GlobalInvocationID.x;

vec3 accel(vec3 x_i, uint skip_index)
{
	vec3 a = {0.0, 0.0, 0.0};
	float point_count_f = float(point_count);
	
	for(uint i = 0; i < uint(point_count); ++i)
	{
		if(skip_index == i)
			continue;
		
		vec3 r = pos[i].xyz - x_i;
		
		a += G * mass[i] * normalize(r) / (r * r);
	}
	
	return a;
}

void main()
{
	// get values
	vec3 x0 = pos[gid].xyz;
	vec3 v0 = vel[gid].xyz;
	
	uint i = gid;

	vec3 xk1 = x0;
	vec3 vk1 = v0;
	vec3 ak1 = accel(x0, i);

	vec3 xk2 = x0 + 0.5 * vk1 * delta_t;
	vec3 vk2 = v0 + 0.5 * ak1 * delta_t;
	vec3 ak2 = accel(xk1, i);

	vec3 xk3 = x0 + 0.5 * vk2 * delta_t;
	vec3 vk3 = v0 + 0.5 * ak2 * delta_t;
	vec3 ak3 = accel(xk3, i);

	vec3 xk4 = x0 + vk3 * delta_t;
	vec3 vk4 = v0 + ak3 * delta_t;
	vec3 ak4 = accel(xk4, i);

	vel1[gid].xyz = v0 + (delta_t / 6.0) * (ak1 + 2 * ak2 + 2 * ak3 + ak4);
	pos1[gid].xyz = x0 + (delta_t / 6.0) * (vk1 + 2 * vk2 + 2 * vk3 + vk4);
}


